// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum ConsumableType {
  PROBE
  UNIVERSAL_AMMO
}

enum SessionType {
  TRADE
  MINING
  INIT_STOCK
}

model user {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  pseudo    String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  role      Role     @default(USER)
  isActif   Boolean  @default(true)

  session        session[]
  globalUserData globalUserData[]
}

model globalUserData {
  id                  Int   @id @default(autoincrement())
  user                user  @relation(fields: [userId], references: [id])
  userId              Int   @unique
  initialPedCardValue Float @default(0)
}

model category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamp(6)
  isActif   Boolean  @default(true)
  items     item[]

  family   family @relation(fields: [familyId], references: [id])
  familyId Int
}

model family {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  isActif    Boolean    @default(true)
  categories category[]
}

model foundOn {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamp(6)
  isActif   Boolean  @default(true)

  itemOnFoundOn itemOnFoundOn[]
}

model item {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  isActif     Boolean  @default(true)
  category    category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  value       Float    @default(0) @db.Float
  ttMax       Float    @default(0) @db.Float
  imageUrlId  String?
  isStackable Boolean  @default(false)
  isLimited   Boolean  @default(false)

  itemOnFoundOn itemOnFoundOn[]

  refinedItem     refineRelations[] @relation("refinedItem")
  unrefinedItem   refineRelations[] @relation("unrefinedItem")
  sessionLineCost sessionLineCost[]
  sessionLineWin  sessionLineWin[]
  findersSetup    setup[]           @relation("finder")
  ampsSetup       setup[]           @relation("amp")
}

model refineRelations {
  refinedItem     item @relation("refinedItem", fields: [refinedItemId], references: [id])
  refinedItemId   Int
  unrefinedItem   item @relation("unrefinedItem", fields: [unrefinedItemId], references: [id])
  unrefinedItemId Int
  quantity        Int

  @@id([refinedItemId, unrefinedItemId])
}

model itemOnFoundOn {
  item      item    @relation(fields: [itemId], references: [id])
  itemId    Int
  foundOn   foundOn @relation(fields: [foundOnId], references: [id])
  foundOnId Int

  @@id([itemId, foundOnId])
}

model setup {
  id             Int            @id @default(autoincrement())
  finder         item           @relation("finder", fields: [finderId], references: [id])
  finderId       Int
  amp            item           @relation("amp", fields: [ampId], references: [id])
  ampId          Int
  depthEnhancer  Int            @default(0)
  rangeEnhancer  Int            @default(0)
  skillEnhancer  Int            @default(0)
  consomableType ConsumableType
}

model session {
  id              Int               @id @default(autoincrement())
  user            user              @relation(fields: [userId], references: [id])
  userId          Int
  number          Int
  type            SessionType
  miningType      Int?
  isOpen          Boolean           @default(true)
  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  closedAt        DateTime?         @db.Timestamp(6)
  clics           Int
  ttCost          Float             @default(0) @db.Float
  ttWin           Float             @default(0) @db.Float
  ttcWin          Float             @default(0) @db.Float
  sessionLineWin  sessionLineWin[]
  sessionLineCost sessionLineCost[]
}

model sessionLineCost {
  id        Int     @id @default(autoincrement())
  item      item    @relation(fields: [itemId], references: [id])
  itemId    Int
  quantity  Int     @default(0)
  session   session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model sessionLineWin {
  id              Int     @id @default(autoincrement())
  item            item    @relation(fields: [itemId], references: [id])
  itemId          Int
  quantityStorage Int     @default(0)
  quantityAvatar  Int     @default(0)
  session         session @relation(fields: [sessionId], references: [id])
  sessionId       Int
}
